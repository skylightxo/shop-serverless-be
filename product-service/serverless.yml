service: product-service

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - "${cf:import-service-${env:STAGE}.NewProductSQSQueueArn}"
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        Ref: SNSTopic

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          IsExpensive:
            - "false"
    SNSSubscription1:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL_FOR_EXPENSIVE_PRODUCTS}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          IsExpensive:
            - "true"

  stage: dev
  region: eu-west-1

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            - "${cf:import-service-${env:STAGE}.NewProductSQSQueueArn}"

plugins:
  - serverless-auto-swagger

custom:
  autoswagger:
    apiType: "http"
    generateSwaggerOnDeploy: false
    schemes: ["http", "https", "ws", "wss"]
    excludeStages: ["production", "anyOtherStage"]
